name: git diff
description: Generates file change log between 2 git refs
inputs:
  ref: 
    description: git ref to use as head
    required: false
    default: HEAD
  base-ref:
    description: git ref to use as base
    required: false
    default: HEAD~1
  status:
    description: Change status of the files to filter by. See https://git-scm.com/docs/git-status#_output
    required: false
    default: d
  filename-pattern:
    description: Filename pattern to filter by
    required: false
    default: '*'
outputs:
  filenames:
    description: A JSON array of filenames that changed
    value: ${{ toJSON(fromJSON(steps.diff.outputs.result).changedFilenames) }}
runs:
  using: composite
  steps:
  - uses: actions/github-script@v7
    id: diff
    env:
      INPUT_FILENAME_PATTERN: ${{ inputs.filename-pattern }}
      INPUT_REF: ${{ inputs.ref }}
      INPUT_BASE_REF: ${{ inputs.base-ref }}
      INPUT_STATUS: ${{ inputs.status }}
    with:
      script: |-
        let {
          INPUT_REF: ref,
          INPUT_BASE_REF: baseRef,
          INPUT_STATUS: diffFilter,
          INPUT_FILENAME_PATTERN: filenamePatterns,
          GITHUB_REF: headRef,
        } = process.env

        filenamePatterns = filenamePatterns
          .split('\n')
          .map(pattern => pattern.trim())

        // Attempt fetch and branch creation for each ref
        await Promise.allSettled(
          [ ref, baseRef, headRef ]
            .map(ref => ref.split(/[~|\^|@]/)[0])
            .filter(Boolean)
            .map(async ref => {
              await exec.getExecOutput('git', ['fetch', 'origin', ref])
              await exec.getExecOutput('git', ['branch', ref, `remotes/origin/${ref}`])
            })
        )

        let { stdout: changedFilenames } = await exec.getExecOutput(
          'git', 
          [
            'diff', 
            '--name-only',
            '--diff-filter', diffFilter, 
            `${baseRef}...${ref}`, 
            '--', 
            ...filenamePatterns,
          ]
        )

        return { 
          changedFilenames: changedFilenames.split('\n').filter(Boolean),
        }
